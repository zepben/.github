# TODO: Replace <product-key> with appropriate value
name: Release App 

on: 
  workflow_dispatch:

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.0.0
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v2
      - name: Release checks and update version for release
        run: |
          /scripts/release-checks.sh --java --maven pom.xml
          /scripts/finalize-version.sh --java --maven pom.xml
        shell: bash

  build-artifact:
    needs: release-checks
    runs-on: ubuntu-latest
    container: zepben/pipeline-java
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
      artifact-id: ${{ steps.build.outputs.artifact-id }}
      version: ${{ steps.build.outputs.version }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache maven deps
        uses: actions/cache@v2
        with:
          path: /maven
          key: maven

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash

      - name: Maven package
        id: build
        run: |
          mvn clean package -f pom.xml -P release -Dgpg.key.id=$GPG_KEY_ID -Dgpg.key.password=$GPG_KEY_PASSWORD
          artifactId=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/artifactId")
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          artifact="${artifactId}-${version}.jar"
          echo "::set-output name=version::$(echo $version)"
          echo "::set-output name=artifact::$(echo $artifact)"
          echo "::set-output name=artifact-id::$(echo $artifactId)"
          echo "::set-output name=artifact-path::$(echo target/$artifact)"
        shell: bash
        continue-on-error: true

      - uses: actions/upload-artifact@master
        if: steps.build.outcome == 'success'
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact-path }}
      
      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in the mvn package command above."
          exit 1
        shell: bash

  build-docs:
    needs: [build-artifact]
    runs-on: ubuntu-latest
    outputs:
      artifact: docs
    container: node:12-alpine
    steps:
      - name: Install Git
        run: |
          apk add git

      - uses: actions/checkout@v2

      - name: Cache nodejs deps
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          VERSION: ${{ needs.build-artifact.outputs.version }}
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        continue-on-error: true

      - uses: actions/upload-artifact@master
        if: steps.build.outcome == 'success'
        with:
          name: docs
          path: docs/build/

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in the docusaurus build above."
          exit 1
        shell: sh

  create-release:
    needs: [build-artifact, build-docs]
    runs-on: ubuntu-latest
    outputs:
      check_container_config: ${{ steps.check_container_config.outputs.files_exists }}
    container: zepben/pipeline-basic:5.0.0
    steps:
      - uses: actions/checkout@v2

      - name: Merge and Tag
        id: merge
        run: | 
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          artifactId=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/artifactId")
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          artifact="${artifactId}-${version}.jar"
          git tag "v$version"
          git push --tags
          echo "::set-output name=tag::$(echo v$version)"
          echo "::set-output name=artifact::$(echo $artifact)"
          echo "::set-output name=artifact-path::$(echo target/$artifact)"
        shell: bash
        continue-on-error: true

      - name: Fail
        if: steps.merge.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          release_name: ${{ steps.merge.outputs.tag }}
          body_path: changelog.md
          draft: false
          prerelease: false

      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-artifact.outputs.artifact }}
          path: built-artifacts

      - name: Download docs
        uses: actions/download-artifact@v2
        with:
          name: docs
          path: docs-site

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: built-artifacts/${{ needs.build-artifact.outputs.artifact }}
          asset_name: ${{ needs.build-artifact.outputs.artifact }}
          asset_content_type: application/zip

      - name: Zip documentation
        run: |
          cd docs-site
          zip -r docs-site.zip .
        shell: bash

      - name: Upload docs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: docs-site/docs-site.zip
          asset_name: docs-site.zip
          asset_content_type: application/zip

      - name: Deploy documentation
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ secrets.DOCS_REPO }}
          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
          client-payload: '{"product_key": "<product-key>", "download_url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.merge.outputs.tag }}/docs-site.zip"}'

      - name: Check container config existence
        id: check_container_config
        uses: andstor/file-existence-action@v1
        with:
          files: "container.json"


  update-version:
    needs: create-release
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.2.0
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v2
      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --java --maven --release pom.xml changelog.md
        shell: bash

  build-container:
    needs: [build-artifact, create-release]
    if: needs.create-release.outputs.check_container_config == 'true'
    runs-on: ubuntu-latest
    container:  hashicorp/packer
    env:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-artifact.outputs.artifact }}
          path: built-artifacts

      - name: Create Docker image
        run: |
          apk add docker jq
          mv built-artifacts/*.jar built-artifacts/${ARTIFACT_ID}.jar
          jq --arg VERSION $VERSION '."post-processors"[0][0].tag = $VERSION' container.json > container.json.tmp
          mv container.json.tmp container.json
          mkdir /build
          export PACKER_CONFIG_DIR=/build
          echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
          packer build container.json
        shell: bash
        env:
          VERSION: ${{ needs.build-artifact.outputs.version }}
          ARTIFACT_ID: ${{ needs.build-artifact.outputs.artifact-id }}
