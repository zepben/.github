# Notes: 
# * Default release notes file is docs/release.md.
# * Update deploy-docs -> PRODUCT_NAME.
name: Release App 

on: 
  workflow_dispatch:

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.0.0
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v2
      - name: Release checks and update version for release
        run: |
          /scripts/release-checks.sh --java --maven pom.xml
          FILE=docs/release.md
          export release_date=$(date +'%d %B %Y')
          /scripts/finalize-version.sh --java --maven pom.xml $FILE 'sed -i -e "s/TBD/$release_date/g"'
        shell: bash
  create-release:
    needs: release-checks
    runs-on: ubuntu-latest
    container: zepben/pipeline-java
    outputs:
      check_container_config: ${{ steps.check_container_config.outputs.files_exists }}
      tag: ${{ steps.build.outputs.tag }}
      version: ${{ steps.build.outputs.version }}
      artifact-id: ${{ steps.build.outputs.artifact-id }}
      source-url: ${{ steps.build.outputs.source-url }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache maven deps
        uses: actions/cache@v2
        with:
          path: /maven
          key: maven

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash

      - name: Maven package
        id: build
        run: |
          mvn clean package -f pom.xml -P release -Dgpg.key.id=$GPG_KEY_ID -Dgpg.key.password=$GPG_KEY_PASSWORD
          artifactId=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/artifactId")
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          artifact="${artifactId}-${version}.jar"
          tag=v$version
          echo "::set-output name=version::$(echo $version)"
          echo "::set-output name=tag::$(echo $tag)"
          echo "::set-output name=artifact-id::$(echo $artifactId)"
          echo "::set-output name=artifact::$(echo $artifact)"
          echo "::set-output name=artifact-path::$(echo target/$artifact)"
          source_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/archive/${tag}.zip"
          echo "::set-output name=source-url::$(echo $source_url)"
        shell: bash
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build.outputs.tag }}
          release_name: ${{ steps.build.outputs.tag }}
          commitish: 'release'
          body_path: docs/release.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.artifact-path }}
          asset_name: ${{ steps.build.outputs.artifact }}
          asset_content_type: application/zip

      - uses: actions/upload-artifact@master
        with:
          name: build-artifact
          path: ${{ steps.build.outputs.artifact-path }}

      - name: Check container config existence
        id: check_container_config
        uses: andstor/file-existence-action@v1
        with:
          files: "container.json"

  handle-release-failure:
    needs: create-release
    if: failure()
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.0.0
    steps:
      - uses: actions/checkout@v2
      - name: Delete release branch
        run: | 
          git push origin -d release
        shell: bash

      - uses: dev-drprasad/delete-tag-and-release@v0.1.2
        if: ${{ needs.create-release.outputs.tag }}
        with:
          delete_release: true
          tag_name: ${{ needs.create-release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-version:
    needs: create-release
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.0.0
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v2
      - name: Update to next minor version
        run: |
          export FILE=docs/release.md
          export ln=$(cat $FILE | grep -n "### v[0-9]\+.[0-9]\+.[0-9]\+" | head -1 | cut -d':' -f1)
          /scripts/update-version.sh --java --maven --release pom.xml $FILE 'next_release_version=${version//-SNAPSHOT/} && sed -i "${ln}i \#\#\# v${version//-SNAPSHOT/}\n\n\#\#\#\#\# Breaking Changes\n\* None.\n\n\#\#\#\#\# New Features\n\* None.\n\n\#\#\#\#\# Enhancements\n\* None.\n\n\#\#\#\#\# Fixes\n\* None.\n\n\#\#\#\#\# Notes\n\* None.\n\n\-\-\-\n" $changelog && sed -i "5i \|\[${next_release_version}\]\(\#v${next_release_version//\./}\)\| \`TBD\` \|"'
        shell: bash

  deploy-docs:
    needs: create-release
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.0.0
    steps:
      - name: Deploy Docs
        id: docs
        uses: zepben/bitbucket-trigger-pipeline-action@main
        with:
          AUTH: ${{ secrets.DOCS_PIPELINE_AUTH }}
          URL: ${{ secrets.DOCS_PIPELINE_URL }}
          BRANCH: ${{ secrets.DOCS_PIPELINE_BRANCH }}
          CUSTOM_PIPELINE_NAME: ${{ secrets.DOCS_PIPELINE_NAME }}
          PRODUCT_NAME: "Energy Workbench Server"
          PRODUCT_VERSION: ${{ needs.create-release.outputs.version }}
          SOURCE_URL: ${{ needs.create-release.outputs.source-url }}

  build-container:
    needs: create-release
    if: needs.create-release.outputs.check_container_config == 'true'
    runs-on: ubuntu-latest
    container:  hashicorp/packer
    env:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: built-artifacts

      - name: Create Docker image
        run: |
          apk add docker jq
          mv built-artifacts/*.jar built-artifacts/${ARTIFACT_ID}.jar
          jq --arg VERSION $VERSION '."post-processors"[0][0].tag = $VERSION' container.json > container.json.tmp
          mv container.json.tmp container.json
          mkdir /build
          export PACKER_CONFIG_DIR=/build
          echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin
          packer build container.json
        shell: bash
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          ARTIFACT_ID: ${{ needs.create-release.outputs.artifact-id }}
