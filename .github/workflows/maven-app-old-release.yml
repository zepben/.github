# Note: default release notes file is docs/release.md.
name: Maven App Release

on:
  workflow_call:
    inputs:
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      NEXUS_MAVEN_REPO:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      NEXUS_SIGNATURE:
        required: true
      NEXUS_MAVEN_SNAPSHOT:
        required: true
      NEXUS_MAVEN_RELEASE:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL:
        required: false


    outputs:
      version:
        description: "The current released version."
        value: ${{ jobs.release-checks.outputs.version }}
jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_SIGNATURE: ${{ secrets.NEXUS_SIGNATURE }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --java --maven pom.xml
          /scripts/finalize-version.sh --java --maven pom.xml changelog.md
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          echo "version=$version" >> "${GITHUB_OUTPUT}"
        shell: bash

      - name: Test changelog format
        id: changelog
        shell: bash
        run: |
          changelog=$(sed -n -E "/${{ steps.check.outputs.version }}/,/## [[0-9]+\.[0-9]+\.[0-9]+]/ { /## \[/d;p }" changelog.md)
          if [[ -z "$changelog" ]]; then
            echo "Changelog content was not found - ensure your changelog.md matches the expected growing format. Deleting release branch."
            git push origin -d release
            # We can safely fail here because we haven't done anything yet. Changelog.md file should be in correct format.
            exit 1
          fi
          # Changelog has newlines which isn't well supported, so we base64 with line wrap disabled (-w0)
          new_changelog=$(echo "${changelog}" | base64 -w0)
          echo "changelog=${new_changelog}" >> $GITHUB_OUTPUT

  deploy:
    needs: release-checks
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
    container: zepben/pipeline-java-ewb
    steps:
      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v4

      - name: Cache maven deps
        uses: actions/cache@v4
        with:
          path: /maven
          key: maven

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash

      - name: Maven package
        id: build
        run: |
          artifactId=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/artifactId")
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          artifact="${artifactId}-${version}"
          mvn clean package -B -f pom.xml -Dserver.repo.url=$NEXUS_MAVEN_REPO -Dserver.username=$NEXUS_USERNAME -Dserver.password=$NEXUS_PASSWORD -Dnexus.signature=$NEXUS_SIGNATURE -Dserver.release.url=$NEXUS_RELEASE_URL -Dserver.snapshot.url=$NEXUS_SNAPSHOT_URL
          mkdir .artifact-$artifact
          cp target/* -t .artifact-$artifact || :
          rm .artifact-$artifact/original*.jar || :
          echo "version=$(echo $version)" >> ${GITHUB_OUTPUT}
          echo "artifact=$(echo $artifact)" >> ${GITHUB_OUTPUT}
          echo "artifact-id=$(echo $artifactId)" >> ${GITHUB_OUTPUT}
          echo "artifact-path=$(echo .artifact-$artifact/)" >> ${GITHUB_OUTPUT}

        shell: bash
        env:
          NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_SIGNATURE: ${{ secrets.NEXUS_SIGNATURE }}
          NEXUS_RELEASE_URL: ${{ secrets.NEXUS_MAVEN_RELEASE }}
          NEXUS_SNAPSHOT_URL: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: steps.build.outcome == 'success'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        id: upload
        if: steps.build.outcome == 'success'
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact-path }}
          if-no-files-found: error
          include-hidden-files: true
        continue-on-error: true

      - name: Delete release branch if deploy failed and fail
        if: steps.build.outcome == 'failure' || steps.upload.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the mvn deploy command above."
          exit 1
        shell: bash

  create-release:
    needs: [deploy, release-checks]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v${{ needs.release-checks.outputs.version }}"
          git push --tags
          echo "::set-output name=tag::$(echo v${{ needs.release-checks.outputs.version }})"
        shell: bash
        continue-on-error: true

      - name: Fail if any previous step failed
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          path: built-artifacts
          merge-multiple: true
        continue-on-error: true

      - name: Get latest changelog
        id: changelog
        run: |
          echo "${{ needs.release-checks.outputs.changelog }}" | base64 -d > latest_changelog.txt
        shell: bash
        continue-on-error: true

      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: latest_changelog.txt
          draft: false
          prerelease: false
          files: |
            built-artifacts/*
        continue-on-error: true


  update-version:
    needs: [create-release]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --java --grow-changelog --maven --release pom.xml changelog.md
        shell: bash
