name: Maven Library Snapshot

on:
  workflow_call:
    inputs:
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      licencecheck:
        description: 'Need to check licence headers/files'
        required: false
        type: boolean
        default: false
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
      product-key:
        description: 'Product key used for deploying docs. Should be repo specific. E.g: "python-sdk"'
        required: false
        default: "productkeynotprovided"
        type: string
      product-repo:
        description: 'Product repository used for downloading snapshot docs'
        required: false
        default: "productreponotprovided"
        type: string
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      NEXUS_MAVEN_REPO:
        required: false
      NEXUS_USERNAME:
        required: false
      NEXUS_PASSWORD: 
        required: false
      NEXUS_MAVEN_SNAPSHOT:
        required: false
      NEXUS_MAVEN_RELEASE:
        required: false
      ZEPBEN_GPG_KEY:
        required: false
      OSSRH_USERNAME:
        required: false
      OSSRH_PASSWORD:
        required: false
      GPG_KEY_ID:
        required: false
      GPG_KEY_PASSWORD:
        required: false
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL: 
        required: false

jobs:

  check-docs:
    runs-on: ubuntu-latest
    outputs:
      docs-present: ${{ steps.docs.outputs.present }}
    steps: 
      - uses: actions/checkout@v3

      - name: Check if docs present
        id: docs
        shell: bash
        run: |
          if [ -d docs ]; then
            echo "Docs folder found, will run the build-docs job"
            echo "present=yes" >> "${GITHUB_OUTPUT}"
            echo "present=yes" >> "${GITHUB_ENV}"
          else
            echo "Docs folder not found, will skip the build-docs"
          fi

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Check doc build artifacts are ignored
        if: ${{ env.present == 'yes' }}
        shell: sh {0}
        run: |
          # Make sure directories are properly ignored
          # docs/node_modules
          git check-ignore -q docs/node_modules 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              exit 1
          fi

          # docs/build
          git check-ignore -q docs/build 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/build' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/build' to .gitignore"
              exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    container: zepben/pipeline-java
    env:
      LICENCE_CHECK: ${{ inputs.licencecheck }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache maven deps
        uses: actions/cache@v3
        with:
          path: /maven
          key: maven

      - name: Cache licence-check
        if: ${{ env.LICENCE_CHECK == true }}
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Check licence
        if: ${{ env.LICENCE_CHECK == true }}
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Set profile
        id: profile
        run: |
          priv=${{ inputs.private }}
          if [[ $priv == 'true' ]]
          then 
            echo "PROFILE=zepben-maven" >> ${GITHUB_ENV} 
          else 
            echo "PROFILE=ossrh" >> ${GITHUB_ENV}
          fi

      - name: Maven deploy to Central
        uses: zepben/maven-deploy-central-action@main
        with:
          NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_RELEASE_URL: ${{ secrets.NEXUS_MAVEN_RELEASE }}
          NEXUS_SNAPSHOT_URL: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
          ZEPBEN_GPG_KEY: ${{ secrets.ZEPBEN_GPG_KEY_B64 }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
          PROFILE: ${{ env.PROFILE }}

      - name: Upload coverage to Codecov
        if: steps.build.outcome == 'success'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  build-docs:
    runs-on: ubuntu-latest
    needs: [check-docs]
    if: ${{ needs.check-docs.outputs.docs-present == 'yes' }}
    outputs:
      artifact-uploaded: ${{ steps.artifact.outputs.uploaded }}
      product-key: ${{ steps.docs-component.outputs.name }}
      product-repo: ${{ steps.docs-component.outputs.repo }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache-dependency-path: docs/package-lock.json
          cache: npm

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          TAG: false
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        continue-on-error: true

      - name: Failed build
        if: steps.build.outcome == 'failure'
        run: |
          echo "There was an error in the docusaurus build above. Docs are not pushed"
          echo " :boom: There was an error in the docusaurus build step. Current docs are not published" >> ${GITHUB_STEP_SUMMARY}
        shell: sh

      - name: Check if we need to skip deployment for hotfix or LTS branch
        run: |
          if [[ ${GITHUB_REF_NAME} =~ "hotfix" || ${GITHUB_REF_NAME} =~ "LTS" ]]; then
            echo "deployDocs=no" >> ${GITHUB_ENV}
            echo "Running on LTS or hotfix branch, skip deploying docs"
          else
            echo "deployDocs=yes" >> ${GITHUB_ENV}
          fi

      - name: Zip documentation
        if: ${{ env.deployDocs == 'yes' }}
        run: |
          cd docs/build
          zip -r ../../docs.zip .
        shell: bash

      - uses: actions/upload-artifact@v3
        if: ${{ steps.build.outcome == 'success' && env.deployDocs == 'yes' }}
        id: upload
        with:
          name: docs.zip
          path: docs.zip

      - if: ${{ steps.upload.outcome == 'success' }}
        id: artifact
        run:
          echo "uploaded=yes" >> "${GITHUB_OUTPUT}"

      - name: Fetch the document component name
        id: docs-component
        shell: sh {0}
        run: |
            # if product key is supplied
            if [ "${{ inputs.product-key }}" != "productkeynotprovided" ]; then
              echo "name=${{ inputs.product-key }}" >> "${GITHUB_OUTPUT}"
            else
              # This is just so we know that we can parse the docs component properly
              if [ -f docs/docusaurus.config.js ]; then
                # Parse out the baseUrl from the docusaurus configuration.
                baseurl=$(grep baseUrl docs/docusaurus.config.js | sed -e "s#/\",##g")
                # Find the component name
                doc_comp=${baseurl##*/}
                echo "name=${doc_comp}" >> "${GITHUB_OUTPUT}"
                echo "repo=${GITHUB_REPOSITORY}" >> "${GITHUB_OUTPUT}"
              else
                  echo "Docs folder exists, but there's no docusaurus.config.js; check your code!"
                  echo " :boom: Docs folder exists, but there's no docusaurus.config.js; check your code!" >> "${GITHUB_STEP_SUMMARY}"
                  exit 1
              fi
            fi

  update-snapshot-version:
    needs: [deploy]
    container: zepben/pipeline-basic
    runs-on: ubuntu-latest
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update snapshot version
        run: |
          /scripts/update-version.sh --java --snapshot --maven pom.xml

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: ${{ needs.build-docs.outputs.artifact-uploaded == 'yes' }}
    steps:
      - name: Deploy documentation
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ secrets.DOCS_REPO }}
          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
          client-payload: '{"product_key": "${{needs.build-docs.outputs.product-key}}", "download_url": "${{needs.build-docs.outputs.product-repo}}"}'

