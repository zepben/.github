name: Build

on:
  workflow_call:
    inputs:
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      LC_URL: 
        required: false

jobs:
  check-for-leaks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: fetch gitleaks config
      #   run: |
      #     if [ ! -f gitleaks.toml ]; then
      #       cp /configs/gitleaks.toml .
      #     fi
      #   shell: bash

      - uses: gitleaks/gitleaks-action@v2
        id: leaks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_CONFIG: gitleaks.toml
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
          GITLEAKS_VERSION: latest
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
        continue-on-error: true

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Comment on pr
        if: steps.leaks.outcome == 'failure'
        run: |
          if [ "x${{ github.event.pull_request.number }}" != "x" ]; then
            message="Some secret leaks were potentially detected in this PR.\nCheck https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info"
            echo -e "${message}" | gh pr comment ${{ github.event.pull_request.number }} --body-file - 
          fi

  build-and-test:
    runs-on: ubuntu-latest
    container: python:3.9
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    outputs: 
      docs-present: ${{ steps.docs.outputs.present }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install tox

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Build and test
        run: |
          tox
        shell: bash

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Check if docs present
        id: docs
        run: |
          if [ -d docs ]; then
            echo "Docs folder found, will run the build-docs job"
            echo "present=yes" >> "${GITHUB_OUTPUT}"
            echo "present=yes" >> "${GITHUB_ENV}"
          else
            echo "Docs folder not found, will skip the build-docs"
          fi

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Check doc build artifacts are ignored
        if: ${{ env.present == 'yes' }}
        shell: sh {0}
        run: |
          # Make sure directories are properly ignored
          # docs/node_modules
          git check-ignore -q docs/node_modules 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              exit 1
          fi

          # docs/build
          git check-ignore -q docs/build
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/build' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/build' to .gitignore"
              exit 1
          fi

  build-docs:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.docs-present == 'yes' }}
    container: zepben/pipeline-docusaurus:test-docusaurus3-build-update
    steps:

      - uses: actions/checkout@v4

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@docusaurus3
        with:
          TAG: false
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
