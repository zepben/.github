name: NPM Static App Snapshot Release

on:
  workflow_call:
    inputs:
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      build-docs:
        description: 'Repo has docusaurus docs'
        required: false
        type: boolean
        default: false
      licencecheck:
        description: 'Need to check licence headers/files'
        required: false
        type: boolean
        default: false
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      NEXUS_NPM_REPO:
        required: true
      CI_NPM_TOKEN:
        required: true
      CI_GITHUB_TOKEN:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL: 
        required: false

jobs:
  build-artifact:
    env:
      LICENCE_CHECK: ${{ inputs.licencecheck }}
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
      version: ${{ steps.build.outputs.version }}
    container: node:14-alpine
    steps:
    - name: Install Dependencies
      run: |
        apk add jq tar alpine-conf git

    - name: Cache nodejs deps
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm

    - uses: actions/checkout@v3

    - name: Cache licence-check
      if: ${{ env.LICENCE_CHECK == true }}
      uses: actions/cache@v3
      with:
        path: /lc
        key: lcc

    - name: Check licence
      if: ${{ env.LICENCE_CHECK == true }}
      uses: zepben/licence-check-action@main
      with:
        LC_URL: ${{ secrets.LC_URL }}
        PATH: ${{ inputs.sourcepath }}

    - name: Set timezone to Australia/ACT
      run: |
        setup-timezone -z Australia/ACT

    - name: create .npmrc
      run: | 
        rm -rf ~/.npmrc
        echo "@zepben:registry=${{ secrets.NEXUS_NPM_REPO }}" >> ~/.npmrc
        echo "//mavenrepo.zepben.com/repository/zepben-npm/:_authToken=${{ secrets.CI_NPM_TOKEN }}" >> ~/.npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.CI_GITHUB_TOKEN }}" >> ~/.npmrc
        echo "\n" >> ~/.npmrc

    - name: build
      id: build
      run: |
        echo "NPM is sensitive to .npmrc formatting; check that it has a newline at the end!!!"
        npm ci --unsafe-perm
        npm run prod
        version=$(jq -r .version package.json)
        artifactId=$(jq -r .name package.json)
        artifact="$artifactId-$version-SNAPSHOT.tar.bz2"
        tar jcvf "$artifact" -C dist .
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "artifact=$artifact" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v3
      if: steps.build.outcome == 'success'
      with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact }}

  build-docs:
    runs-on: ubuntu-latest
    if: ${{ inputs.build-docs }}
    container: node:16-alpine
    steps:
      - name: Install Dependencies
        run: |
          apk add tar 

      - name: Cache nodejs deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm

      - uses: actions/checkout@v3

      - name: create .npmrc
        run: | 
          rm -rf ~/.npmrc
          echo "@zepben:registry=${{ secrets.NEXUS_NPM_REPO }}" >> ~/.npmrc
          echo "//mavenrepo.zepben.com/repository/zepben-npm/:_authToken=${{ secrets.CI_NPM_TOKEN }}" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.CI_GITHUB_TOKEN }}" >> ~/.npmrc
          echo "\n" >> ~/.npmrc

      - name: Build docs
        id: docs
        run: |
          cd docs
          npm ci --unsafe-perm
          npm run build

      - uses: actions/upload-artifact@v3
        if: steps.docs.outcome == 'success' 
        with:
          name: docs
          path: docs/build/

  update-snapshot-version:
    needs: [build-artifact, build-docs]
    container: zepben/pipeline-basic
    runs-on: ubuntu-latest
    env:
      DEBUG: ${{ secrets.DEBUG }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update snapshot version
        run: |
          /scripts/update-version.sh --js --snapshot package.json
