name: Maven Build

on: 
  workflow_call:
    inputs:
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      NEXUS_MAVEN_REPO:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      NEXUS_SIGNATURE:
        required: true
      LC_URL: 
        required: false


jobs:
  check-for-leaks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      # - name: fetch gitleaks config
      #   run: |
      #     if [ ! -f gitleaks.toml ]; then
      #       cp /configs/gitleaks.toml .
      #     fi
      #   shell: bash

      - uses: gitleaks/gitleaks-action@v2
        id: leaks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_CONFIG: gitleaks.toml
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
          GITLEAKS_VERSION: latest
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
        continue-on-error: true

      - name: Comment on pr
        if: steps.leaks.outcome == 'failure'
        run: |
          if [ "x${{ github.event.pull_request.number }}" != "x" ]; then
            message="Some secret leaks were potentially detected in this PR.\nCheck https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info"
            echo -e "${message}" | gh pr comment ${{ github.event.pull_request.number }} --body-file - 
          fi

  build-and-test:
    runs-on: ubuntu-latest
    container: zepben/pipeline-java-ewb
    outputs: 
      docs-present: ${{ steps.docs.outputs.present }}
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_SIGNATURE: ${{ secrets.NEXUS_SIGNATURE }}
    steps:
      - uses: actions/checkout@v4

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Check the snapshot version
        shell: bash {0}
        run: |
          xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version" | grep SNAPSHOT
          if [ $? = 0 ]; then
            echo "This project has a '-SNAPSHOT' in its version number. Replace it with 'b'" 
            exit 1
          fi

      - name: Cache maven deps
        uses: actions/cache@v4
        with:
          path: /maven
          key: maven

      - name: Maven build and test
        id: build
        run: |
          mvn clean test -B -f pom.xml -Dserver.username=$NEXUS_USERNAME -Dserver.password=$NEXUS_PASSWORD -Dserver.repo.url=$NEXUS_MAVEN_REPO -Dnexus.signature=$NEXUS_SIGNATURE 
        shell: bash

      - name: Upload coverage to Codecov
        if: steps.build.outcome == 'success'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Check if docs present
        id: docs
        run: |
          if [ -d docs ]; then
            echo "Docs folder found, will run the build-docs job"
            echo "present=yes" >> "${GITHUB_OUTPUT}"
            echo "present=yes" >> "${GITHUB_ENV}"
          else
            echo "Docs folder not found, will skip the build-docs"
          fi

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Check doc build artifacts are ignored
        if: ${{ env.present == 'yes' }}
        shell: sh {0}
        run: |
          # Make sure directories are properly ignored
          # docs/node_modules
          git check-ignore -q docs/node_modules 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              exit 1
          fi

          # docs/build
          git check-ignore -q docs/build 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/build' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/build' to .gitignore"
              exit 1
          fi

  build-docs:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ needs.build-and-test.outputs.docs-present == 'yes' }}
    container: zepben/pipeline-docusaurus:sha-100dd2c
    steps:

      - uses: actions/checkout@v4

      - name: Check that title is defined in the repo
        run: |
          if [[ -d docs/site-config && -z $DOCS_TITLE ]]; then
            echo "The \$DOCS_TITLE environment variable needs to be set on this repo!"
            exit 1
          fi
        env:
          DOCS_TITLE: ${{ vars.DOCS_TITLE }}
        shell: bash

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@OPS-467-nodeps-docusaurus3
        with:
          TAG: false
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          DOCS_TITLE: ${{ vars.DOCS_TITLE }}
