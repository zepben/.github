name: NPM Static App Release

on: 
  workflow_call:
    inputs:  
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      NEXUS_NPM_REPO:
        required: true
      CI_NPM_TOKEN:
        required: true
      CI_GITHUB_TOKEN:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL: 
        required: false

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.7.4
    continue-on-error: false
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Release checks and update version for release
        run: |
          /scripts/release-checks.sh --js package.json
          /scripts/finalize-version.sh --js package.json changelog.md
        shell: bash

  build-artifact:
    needs: release-checks
    runs-on: ubuntu-latest
    container: node:20-alpine
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
      artifact-id: ${{ steps.build.outputs.artifact-id }}
      version: ${{ steps.build.outputs.version }}
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - name: Install Dependencies
        run: |
          apk add jq tar alpine-conf git

      - name: Cache nodejs deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm

      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Set timezone to Australia/ACT
        run: |
          setup-timezone -z Australia/ACT

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: sh

      - name: create .npmrc
        run: | 
          rm -rf .npmrc
          echo "@zepben:registry=${{ secrets.NEXUS_NPM_REPO }}" >> .npmrc
          echo "//mavenrepo.zepben.com/repository/zepben-npm/:_authToken=${{ secrets.CI_NPM_TOKEN }}" >> .npmrc
          echo "\n" >> .npmrc

      - name: build
        id: build
        run: |
          echo "NPM is sensitive to .npmrc formatting; check that it has a newline at the end!!!"
          npm ci --unsafe-perm
          npm run build
          # We run npm pack twice because the command may log extra stdout from the `prepare` script.
          # We want all logs in CI, but we also want to capture just the artifact name.
          npm pack
          artifact="$(npm pack --foreground-scripts=false --json --dry-run | jq -r .[0].filename)"
          npm publish
          version=$(jq -r .version package.json)
          echo "::set-output name=version::$(echo $version)"
          echo "::set-output name=artifact::$(echo $artifact)"
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        if: steps.build.outcome == 'success'
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact }}
          if-no-files-found: error

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in the npm package command above."
          exit 1
        shell: sh

  create-release:
    needs: [build-artifact]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.7.4
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    outputs:
      artifact: ${{ steps.merge.outputs.artifact }}
      tag: ${{ steps.merge.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Get latest changelog
        id: changelog
        run: |
          lines=$(egrep -n "## \[[0-9]+\.[0-9]+\.[0-9]+\]" changelog.md | head -2 | cut -f1 -d:)
          line1=$(echo "$lines" | head -1)
          line2=$(echo "$lines" | tail -1)
          cat changelog.md | tail -n +$((line1+1)) | head -n $((line2-line1-1)) > latest_changelog.txt
        shell: bash
        continue-on-error: true

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-artifact.outputs.artifact }}
          path: built-artifacts/
        continue-on-error: false

      - name: Check artifact
        run: | 
          ls -la
          ls -la built-artifacts
        shell: sh

      - name: Merge and Tag
        id: merge
        run: | 
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          version=$(jq -r .version package.json)
          git tag "v$version"
          git push --tags
          echo "::set-output name=tag::$(echo v$version)"
          echo "::set-output name=artifact::$(echo ${{ needs.build-artifact.outputs.artifact }})"
        shell: bash
        continue-on-error: true

      - name: Fail
        if: steps.merge.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: latest_changelog.txt
          draft: false
          prerelease: false
          files: |
            built-artifacts/${{ needs.build-artifact.outputs.artifact }}
        continue-on-error: true

      - name: Fail Release
        if: steps.create_release.outcome == 'failure'
        run: | 
          git push origin -d release
          echo "There was an error in the npm package release above."
          exit 1
        shell: sh

  update-version:
    needs: create-release
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic:5.7.4
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --js --release --grow-changelog package.json changelog.md
        shell: bash
