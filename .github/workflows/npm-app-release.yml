name: NPM Static App Release

on:
  workflow_call:
    inputs:
      product-key:
        description: 'Product key used for deploying docs. Should be repo specific. E.g: "python-sdk"'
        required: false
        default: "productkeynotprovided"
        type: string
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
    secrets:
      NEXUS_NPM_REPO:
        required: true
      CI_NPM_TOKEN:
        required: true
      CI_GITHUB_TOKEN:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL:
        required: false

    outputs:
      version:
        description: "The current released version."
        value: ${{ jobs.release-checks.outputs.version }}
jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    continue-on-error: false
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
      docs-present: ${{ steps.docs.outputs.present }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --js package.json
          /scripts/finalize-version.sh --js package.json changelog.md
          version=$(jq -r .version package.json)
          echo "version=$version" >> "${GITHUB_OUTPUT}"
        shell: bash

      - name: Check if docs present
        id: docs
        shell: bash
        run: |
          if [ -d docs ]; then
            echo "Docs folder found, will run the build-docs job"
            echo "present=yes" >> "${GITHUB_OUTPUT}"
            echo "present=yes" >> "${GITHUB_ENV}"
          else
            echo "Docs folder not found, will skip the build-docs"
          fi

      - name: Check doc build artifacts are ignored
        if: ${{ env.present == 'yes' }}
        shell: sh {0}
        run: |
          # Make sure directories are properly ignored
          # docs/node_modules
          git check-ignore -q docs/node_modules
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              exit 1
          fi

          # docs/build
          git check-ignore -q docs/build
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/build' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/build' to .gitignore"
              exit 1
          fi

      - name: Test changelog format
        id: changelog
        run: |
          changelog=$(sed -n -E "/${{ steps.check.outputs.version }}/,/## [[0-9]+\.[0-9]+\.[0-9]+]/ { /## \[/d;p }" changelog.md)
          if [[ -z "$changelog" ]]; then
            echo "Changelog content was not found - ensure your changelog.md matches the expected growing format. Deleting release branch."
            git push origin -d release
            # We can safely fail here because we haven't done anything yet. Changelog.md file should be in correct format.
            exit 1
          fi
          # Changelog has newlines which isn't well supported, so we base64 with line wrap disabled (-w0)
          new_changelog=$(echo "${changelog}" | base64 -w0)
          echo "changelog=${new_changelog}" >> $GITHUB_OUTPUT

  build-docs:
    needs: release-checks
    runs-on: ubuntu-latest
    if: ${{ needs.release-checks.outputs.docs-present == 'yes' }}
    outputs:
      artifact: docs
      product-key: ${{ steps.docs-component.outputs.name }}
      product-repo: ${{ steps.docs-component.outputs.repo }}
    container: zepben/pipeline-docusaurus
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - name: Install Git
        run: |
          apk add git zip

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Check that title is defined in the repo
        run: |
          if [[ -d docs/site-config && -z $DOCS_TITLE ]]; then
            echo "The \$DOCS_TITLE environment variable needs to be set on this repo!"
            exit 1
          fi
        env:
          DOCS_TITLE: ${{ vars.DOCS_TITLE }}
        shell: bash

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: sh

      - name: Cache nodejs deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          VERSION: ${{ needs.release-checks.outputs.version }}
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          DOCS_TITLE: ${{ vars.DOCS_TITLE }}
        continue-on-error: true

      - name: Zip documentation
        run: |
          cd docs/build
          zip -r ../../docs.zip .
        shell: sh

      - uses: actions/upload-artifact@v4
        if: steps.build.outcome == 'success'
        with:
          name: docs.zip
          path: docs.zip
          if-no-files-found: error

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the docusaurus build above."
          exit 1
        shell: sh

      - name: Fetch the document component name
        id: docs-component
        shell: sh {0}
        run: |
            echo "repo=${GITHUB_REPOSITORY}" >> "${GITHUB_OUTPUT}"
            # if product key is supplied
            if [ "${{ inputs.product-key }}" != "productkeynotprovided" ]; then
              echo "name=${{ inputs.product-key }}" >> "${GITHUB_OUTPUT}"
            else
              # parse out the product key from the repository name
              echo "name=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d\/)" >> "${GITHUB_OUTPUT}"
            fi


  build-artifact:
    needs: [build-docs, release-checks]
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    container: node:20-alpine
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
      artifact-id: ${{ steps.build.outputs.artifact-id }}
      version: ${{ steps.build.outputs.version }}
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - name: Install Dependencies
        run: |
          apk add jq tar alpine-conf git

      - name: Cache nodejs deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm

      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Set timezone to Australia/ACT
        run: |
          setup-timezone -z Australia/ACT

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: sh

      - name: create .npmrc
        run: |
          rm -rf .npmrc
          echo "@zepben:registry=${{ secrets.NEXUS_NPM_REPO }}" >> .npmrc
          echo "//nexus.z.zepben.cloud/repository/zepben-npm/:_authToken=${{ secrets.CI_NPM_TOKEN }}" >> .npmrc
          echo "\n" >> .npmrc

      - name: build
        id: build
        run: |
          npm ci --unsafe-perm
          npm run prod
          version=$(jq -r .version package.json)
          artifactId=$(jq -r .name package.json)
          artifact="$artifactId-$version.tar.bz2"
          tar jcvf "$artifact" -C dist .
          echo "version=$version" >> "${GITHUB_OUTPUT}"
          echo "artifact=$artifact" >> "${GITHUB_OUTPUT}"
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        if: steps.build.outcome == 'success'
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact }}

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the npm package command above."
          exit 1
        shell: sh

  create-release:
    needs: [release-checks, build-artifact]
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.merge.outputs.artifact }}
      tag: ${{ steps.merge.outputs.tag }}
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-artifact.outputs.artifact }}
          path: built-artifacts/
        continue-on-error: false

      - name: Check artifact
        run: |
          ls -la
          ls -la built-artifacts
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          tag="v${{ needs.release-checks.outputs.version }}"
          git tag $tag
          git push --tags
          echo "tag=$tag" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Fail
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the releae branch. It was deleted, check errors"
          echo " :boom: There was an error in merging the releae branch. It was deleted, check errors!" >> "${GITHUB_STEP_SUMMARY}"
          exit 1
        shell: bash

      - name: Get latest changelog
        id: changelog
        run: |
          echo "${{ needs.release-checks.outputs.changelog }}" | base64 -d > latest_changelog.txt
        shell: bash
        continue-on-error: true

      - name: Tell user to release themselves
        if: steps.changelog.outcome == 'failure'
        run: |
          echo "There was an error generating a changelog to associate with the release (see previous step and step in release-checks). You'll need to:"
          echo "1. Fix the changelog"
          echo "2. Manually create the release"
          echo "3. Update to the next snapshot version."
          exit 1
        shell: sh

      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: latest_changelog.txt
          draft: false
          prerelease: false
          files: |
            built-artifacts/${{ needs.build-artifact.outputs.artifact }}
        continue-on-error: true

      - name: Fail Release
        if: steps.create_release.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the npm package release above."
          exit 1
        shell: sh

      - name: Deploy documentation
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ secrets.DOCS_REPO }}
          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
          client-payload: '{"product_key": "${{needs.build-docs.outputs.product-key}}", "download_url": "${{needs.build-docs.outputs.product-repo}}"}'

  update-version:
    needs: create-release
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --js --release --grow-changelog package.json changelog.md
        shell: bash
