# Note: default release notes file is docs/release.md.
name: Maven App Release + Docs

on: 
  workflow_call:
    inputs:
      product-key:
        description: 'Product key used for deploying docs. Should be repo specific. E.g: "python-sdk"'
        required: true
        type: string
      private:
        description: 'Calling workflow from a private repo'
        required: true
        type: boolean
        default: true
      licencecheck:
        description: 'Need to check licence headers/files'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"

    outputs:
      version:
        description: "The current released version."
        value: ${{ jobs.release-checks.outputs.version }}

    secrets:
      CI_GITHUB_TOKEN:
        required: true
      NEXUS_MAVEN_REPO:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD: 
        required: true
      NEXUS_MAVEN_SNAPSHOT:
        required: true
      NEXUS_MAVEN_RELEASE:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      NPM_REPO:
        required: true
      DOCS_REPO:
        required: true
      DOCS_REPO_EVOLVE_WORKFLOW:
        required: true
      LC_URL: 
        required: false



jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      LICENCE_CHECK: ${{ inputs.licencecheck }}
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        if: ${{ env.LICENCE_CHECK == true }}
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Check licence
        if: ${{ env.LICENCE_CHECK == true }}
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --java --maven pom.xml
          /scripts/finalize-version.sh --java --maven pom.xml changelog.md
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          echo "::set-output name=version::$(echo $version)"
        shell: bash

      - name: Cache licence-check
        if: ${{ env.LICENCE_CHECK == true }}
        uses: actions/cache@v3
        with:
          path: /lc
          key: lcc

      - name: Check licence
        if: ${{ env.LICENCE_CHECK == true }}
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

  build-docs:
    needs: release-checks
    runs-on: ubuntu-latest
    outputs:
      artifact: docs
    container: node:20-alpine
    steps:
      - name: Install Git
        run: |
          apk add git

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v3

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: sh

      - name: Cache nodejs deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          VERSION: ${{ needs.release-checks.outputs.version }}
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        if: steps.build.outcome == 'success'
        with:
          name: docs
          path: docs/build/

      - name: Fail build
        if: steps.build.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the docusaurus build above."
          exit 1
        shell: sh

  deploy:
    needs: [release-checks, build-docs]
    runs-on: ubuntu-latest
    container: zepben/pipeline-java
    outputs:
      artifact: ${{ steps.build.outputs.artifact }}
      artifact-id: ${{ steps.build.outputs.artifact-id }}
      version: ${{ steps.build.outputs.version }}
    env:
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
    steps:
      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v3

      - name: Cache maven deps
        uses: actions/cache@v3
        with:
          path: /maven
          key: maven

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash

      - name: Maven package
        id: build
        run: |
          mvn clean package -f pom.xml -Dserver.username=$NEXUS_USERNAME -Dserver.password=$NEXUS_PASSWORD -Dserver.repo.url=$NEXUS_MAVEN_REPO
          artifactId=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/artifactId")
          version=$(xmlstarlet pyx pom.xml | grep -v ^A | xmlstarlet p2x | xmlstarlet sel -t -v "/project/version")
          artifact="${artifactId}-${version}.jar"
          echo "::set-output name=version::$(echo $version)"
          echo "::set-output name=artifact::$(echo $artifact)"
          echo "::set-output name=artifact-id::$(echo $artifactId)"
          echo "::set-output name=artifact-path::$(echo target/$artifact)"
        shell: bash
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: steps.build.outcome == 'success'
        uses: codecov/codecov-action@v3
        with: 
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        id: upload
        if: steps.build.outcome == 'success'
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: ${{ steps.build.outputs.artifact-path }}

      - name: Delete release branch if deploy failed and fail
        if: steps.build.outcome == 'failure' || steps.upload.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in the mvn package command above."
          exit 1
        shell: bash

  create-release:
    needs: [deploy, build-docs, release-checks]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v${{ needs.release-checks.outputs.version }}"
          git push --tags
          echo "::set-output name=tag::$(echo v${{ needs.release-checks.outputs.version }})"
        shell: bash
        continue-on-error: true

      - name: Delete release branch if merge failed and fail
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.deploy.outputs.artifact }}
          path: built-artifacts
        continue-on-error: true

      - name: Download docs
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs-site
        continue-on-error: true

      - name: Zip documentation
        run: |
          cd docs-site
          zip -r docs-site.zip .
        shell: bash
        continue-on-error: true

      - name: Get latest changelog
        id: changelog
        run: |
          lines=$(egrep -n "## \[[0-9]+\.[0-9]+\.[0-9]+\]" changelog.md | head -2 | cut -f1 -d:)
          line1=$(echo "$lines" | head -1)
          line2=$(echo "$lines" | tail -1)
          cat changelog.md | tail -n +$((line1+1)) | head -n $((line2-line1-1)) > latest_changelog.txt
        shell: bash
        continue-on-error: true


      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: latest_changelog.txt
          draft: false
          prerelease: false
          files: |
            built-artifacts/${{ needs.deploy.outputs.artifact }}
            docs-site/docs-site.zip
        continue-on-error: true

      - name: Deploy documentation
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ secrets.DOCS_REPO }}
          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
          client-payload: '{"product_key": "${{ inputs.product-key }}", "download_url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.merge.outputs.tag }}/docs-site.zip"}'
        continue-on-error: true

  # call-build-container:
  #   needs: [build-artifact, create-release]
  #   uses: zepben/energy-workbench-server/.github/workflows/build-release-container.yaml@main
  #   with:
  #     ewbRelease: ${{ needs.build-artifact.outputs.version }}

  update-version:
    needs: [create-release]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      NEXUS_MAVEN_REPO: ${{ secrets.NEXUS_MAVEN_REPO }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_MAVEN_SNAPSHOT: ${{ secrets.NEXUS_MAVEN_SNAPSHOT }}
      NEXUS_MAVEN_RELEASE: ${{ secrets.NEXUS_MAVEN_RELEASE }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --java --maven --release pom.xml changelog.md
        shell: bash
