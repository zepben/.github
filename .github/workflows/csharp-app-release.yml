name: CSharp App Release

on:
  workflow_call:
    inputs:
      test_files:
        description: 'Test dll output files separated by space.'
        required: false
        default: ''
        type: string
      version_file:
        description: 'Project file for updating version.'
        required: true
        type: string
      changelog:
        description: 'Path to the changelog.'
        default: 'changelog.md'
        required: false
        type: string
      private:
        description: 'Calling workflow from a private repo'
        required: false
        type: boolean
        default: true
      sourcepath:
        description: 'Path to source directory (used for licence check)'
        required: false
        type: string
        default: "src"
      configuration:
        description: 'Configuration'
        required: false
        type: string
        default: "Release"
      platform:
        description: 'Platform'
        required: false
        type: string
        default: "x64"
      binary_path:
        description: 'Path to the binaries.'
        required: false
        type: string
        default: ""
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false
      LC_URL:
        required: false

    outputs:
      version:
        description: "The current released version."
        value: ${{ jobs.release-checks.outputs.version }}

jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
      artifact_id: ${{ steps.check.outputs.artifact_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: ${{ inputs.sourcepath }}

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --csharp ${{ inputs.version_file }}
          /scripts/finalize-version.sh --csharp ${{ inputs.version_file }} ${{ inputs.changelog }}
          version=$(cat ${{ inputs.version_file }} | grep "AssemblyVersion(\"[0-9]\+\.[0-9]\+\.[0-9]\+\")" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]")
          echo "version=$version" >> $GITHUB_OUTPUT
          artifact_id=$(cat ${{ inputs.version_file }} | grep "AssemblyTitle" | egrep -o "\"[A-Za-z0-9\-]+\"" | tr -d '"')
          echo "artifact_id=$artifact_id" >> $GITHUB_OUTPUT
        shell: bash

      - name: Test changelog format
        id: changelog
        shell: bash
        run: |
          changelog=$(sed -n -E "/${{ steps.check.outputs.version }}/,/## [[0-9]+\.[0-9]+\.[0-9]+]/ { /## \[/d;p }" changelog.md)
          if [[ -z "$changelog" ]]; then
            echo "Changelog content was not found - ensure your changelog.md matches the expected growing format. Deleting release branch and failing."
            git push origin -d release
            # We can safely fail here because we haven't done anything yet. Changelog.md file should be in correct format.
            exit 1
          fi
          # Changelog has newlines which isn't well supported, so we base64 with line wrap disabled (-w0)
          new_changelog=$(echo "${changelog}" | base64 -w0)
          echo "changelog=${new_changelog}" >> $GITHUB_OUTPUT

  deploy:
    needs: release-checks
    runs-on: windows-2025
    steps:
      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v4

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: Setup MSBuild Path
        uses: microsoft/setup-msbuild@v1

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1.1.1

      - name: Add ZepBen Nuget Repo credentials
        run: nuget sources update -Name "ZepBen" -username "${{ secrets.NEXUS_USERNAME }}" -password "${{ secrets.NEXUS_PASSWORD }}" -configFile "Nuget.Config"

      - name: Restore NuGet Packages
        run:
          msbuild /p:Configuration=${{ inputs.configuration }} /p:Platform=${{ inputs.platform }} /t:restore

      - name: Build
        id: build
        run: msbuild /p:Configuration=${{ inputs.configuration }} /p:Platform=${{ inputs.platform }}

      - name: Test
        run: vstest.console.exe ${{ inputs.test_files }} /Platform:${{ inputs.platform }}

      - name: Set upload path
        id: upload_path
        run: |
          if [[ -z $BINARY_PATH ]]; then
            echo "path=${{ needs.release-checks.outputs.artifact_id }}/bin/Release/" >> $GITHUB_OUTPUT
          else
            echo "path=$BINARY_PATH" >> $GITHUB_OUTPUT
          fi
        env:
          BINARY_PATH: ${{ inputs.binary_path }}
        shell: bash

      - name: Upload Release
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.release-checks.outputs.artifact_id }}
          path: ${{ steps.upload_path.outputs.path }}
          if-no-files-found: error

      - name: If deploy above failed, delete release branch and fail
        if: steps.build.outcome == 'failure' || steps.upload.outcome == 'failure'
        run: |
          git push origin -d release
          echo "The deployment step has failed; check the step **above**. We've deleted the `release` branch to make it easier to run again when ready."
          exit 1
        shell: bash

  create-release:
    needs: [deploy, release-checks]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v${{ needs.release-checks.outputs.version }}"
          git push --tags
          echo "tag=v${{ needs.release-checks.outputs.version }}" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      - name: Fail if any previous step failed
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.release-checks.outputs.artifact_id }}
          path: built-artifacts
        continue-on-error: true

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: ${{ needs.release-checks.outputs.artifact_id }}.zip
          directory: built-artifacts

      - name: Stat zip file
        run: |
          ls
          echo "Y"
          ls built-artifacts
        shell: bash

      - name: Get latest changelog
        id: changelog
        run: |
          echo "${{ needs.release-checks.outputs.changelog }}" | base64 -d > latest_changelog.txt
        shell: bash
        continue-on-error: true

      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: latest_changelog.txt
          draft: false
          prerelease: false
          files: built-artifacts/${{ needs.release-checks.outputs.artifact_id }}.zip
        continue-on-error: true


  update-version:
    needs: [create-release]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --csharp --grow-changelog --release ${{ inputs.version_file }} ${{ inputs.changelog }}
        shell: bash
