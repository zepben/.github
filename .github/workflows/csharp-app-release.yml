name: CSharp App Release

on: 
  workflow_call:
    inputs:
      test_files:
        description: 'Test dll output files separated by space.'
        required: false
        default: ''
        type: string
      version_file:
        description: 'Project file for updating version.'
        required: true
        type: string
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD: 
        required: true
      SLACK_NOTIFICATION:
        required: false
      SLACK_WEBHOOK:
        required: false


jobs:
  release-checks:
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    outputs:
      version: ${{ steps.check.outputs.version }}
      artifact_id: ${{ steps.check.outputs.artifact_id }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Release checks and update version for release
        id: check
        run: |
          /scripts/release-checks.sh --csharp ${{ inputs.version_file }}
          /scripts/finalize-version.sh --csharp ${{ inputs.version_file }} changelog.md
          version=$(cat ${{ inputs.version_file }} | grep "AssemblyVersion(\"[0-9]\+\.[0-9]\+\.[0-9]\+\")" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]")
          echo "::set-output name=version::$(echo $version)"
          artifact_id=$(cat ${{ inputs.version_file }} | grep "AssemblyTitle" | egrep -o "\"[A-Za-z0-9\-]+\"" | tr -d '"')
          echo "::set-output name=artifact_id::$(echo $artifact_id)"
        shell: bash

  deploy:
    needs: release-checks
    runs-on: windows-2019
    steps:
      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - uses: actions/checkout@v3

      - name: Checkout release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git checkout release
        shell: bash
      
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      
      - name: Setup MSBuild Path
        uses: microsoft/setup-msbuild@v1

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1.1.1

      - name: Add ZepBen Nuget Repo credentials
        run: nuget sources update -Name "ZepBen" -username "${{ secrets.NEXUS_USERNAME }}" -password "${{ secrets.NEXUS_PASSWORD }}" -configFile "Nuget.Config"
      
      - name: Restore NuGet Packages
        run:   
          msbuild /p:Configuration=Release /p:Platform=x64 /t:restore

      - name: Build
        id: build
        run: msbuild /p:Configuration=Release /p:Platform=x64

      - name: Test
        run: vstest.console.exe ${{ inputs.test_files }} /Platform:x64

      - name: Upload Release
        id: upload
        uses: actions/upload-artifact@master
        with:
          name: ${{ needs.release-checks.outputs.artifact_id }}
          path: ${{ needs.release-checks.outputs.artifact_id }}/bin/Release/

      - name: Delete release branch if deploy failed and fail
        if: steps.build.outcome == 'failure' || steps.upload.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in one of the steps above."
          exit 1
        shell: bash

  create-release:
    needs: [deploy, release-checks]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v${{ needs.release-checks.outputs.version }}"
          git push --tags
          echo "::set-output name=tag::$(echo v${{ needs.release-checks.outputs.version }})"
        shell: bash
        continue-on-error: true

      - name: Fail if any previous step failed
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the branch. release branch was deleted."
          exit 1
        shell: bash

      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.release-checks.outputs.artifact_id }}
          path: built-artifacts
        continue-on-error: true

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          filename: ${{ needs.release-checks.outputs.artifact_id }}.zip
          directory: built-artifacts

      - name: Stat zip file
        run: |
          ls
          echo "Y"
          ls built-artifacts
        shell: bash

      - name: Create Release and upload assets
        if: success()
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.merge.outputs.tag }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: built-artifacts/${{ needs.release-checks.outputs.artifact_id }}.zip
        continue-on-error: true


  update-version:
    needs: [create-release]
    runs-on: ubuntu-latest
    container: zepben/pipeline-basic
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      SLACK_NOTIFICATION: YES
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update to next minor version
        run: |
          /scripts/update-version.sh --csharp --release ${{ inputs.version_file }} changelog.md
        shell: bash