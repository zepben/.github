name: Python Library Snapshot

on:
  workflow_call:
    inputs:
      product-key:
        description: 'Product key used for deploying docs. Should be repo specific. E.g: "python-sdk"'
        required: false
        default: "productkeynotprovided"
        type: string
      product-repo:
        description: 'Product repository used for downloading snapshot docs'
        required: false
        default: "productreponotprovided"
        type: string
          #pypi-project-name:  # OPS-185, although this could be replaced by parsing the name from .pyproject.toml?
          #  description: 'The Pypi project to deploy to - should be the package name'
          #  required: true
          #  type: string
    secrets:
      CI_GITHUB_TOKEN:
        required: true
      LC_URL:
        required: false
      COVERALLS_REPO_TOKEN:
        required: false
      PYPI_USERNAME:
        required: false
      PYPI_PASSWORD:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    container: python:3.10
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    outputs:
      docs-present: ${{ steps.docs.outputs.present }}
        #    permissions:  # Uncomment these when trusted publishing supports reusable workflows OPS-185
        #      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install tox twine

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Cache licence-check
        uses: actions/cache@v4
        with:
          path: /lc
          key: lcc

      - name: Check licence
        uses: zepben/licence-check-action@main
        with:
          LC_URL: ${{ secrets.LC_URL }}
          PATH: src

      - name: Create .pypirc
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = $PYPI_API_TOKEN" >> ~/.pypirc
          echo "\n" >> ~/.pypirc

      - name: Build and publish
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          tox
          twine upload --non-interactive --config-file ~/.pypirc dist/*
        shell: bash

          # Can be used after https://github.com/pypi/warehouse/issues/11096 is resolved. More secure method of publishing
          # as don't need to store token with no TTL in secrets. OPS-185
          # - name: upload release to PyPI 
          #   uses: pypa/gh-action-pypi-publish@release/v1
          #   with:
          #     name: pypi
          #     repository-url: https://pypi.org/p/${{ inputs.pypi-project-name }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Check if docs present
        id: docs
        run: |
          if [ -d docs ]; then
            echo "Docs folder found, will run the build-docs job"
            echo "present=yes" >> "${GITHUB_OUTPUT}"
            echo "present=yes" >> "${GITHUB_ENV}"
          else
            echo "Docs folder not found, will skip the build-docs"
          fi

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Check doc build artifacts are ignored
        if: ${{ env.present == 'yes' }}
        shell: sh {0}
        run: |
          # Make sure directories are properly ignored
          # docs/node_modules
          git check-ignore -q docs/node_modules 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/node_modules' to .gitignore"
              exit 1
          fi

          # docs/build
          git check-ignore -q docs/build 
          if [ $? != 0 ]; then
              echo "ERROR! Make sure to add 'docs/build' to .gitignore"
              echo "::error line=1::ERROR! Make sure to add 'docs/build' to .gitignore"
              exit 1
          fi

  update-snapshot-version:
    needs: [deploy]
    container: zepben/pipeline-basic
    runs-on: ubuntu-latest
    env:
      DEBUG: ${{ secrets.DEBUG }}
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Update snapshot version
        run: |
          /scripts/update-version.sh --python --snapshot pyproject.toml
        shell: bash

  build-docs:
    runs-on: ubuntu-latest
    container: zepben/pipeline-docusaurus
    needs: [deploy]
    if: ${{ needs.deploy.outputs.docs-present == 'yes' }}
    outputs:
      artifact-uploaded: ${{ steps.artifact.outputs.uploaded }}
      product-key: ${{ steps.docs-component.outputs.name }}
      product-repo: ${{ steps.docs-component.outputs.repo }}
    steps:
      - uses: actions/checkout@v4

      - name: Check that title is defined in the repo
        run: |
          if [[ -d docs/site-config && -z $DOCS_TITLE ]]; then
            echo "The \$DOCS_TITLE environment variable needs to be set on this repo!"
            exit 1
          fi
        env:
          DOCS_TITLE: ${{ vars.DOCS_TITLE }}
        shell: bash

      - name: Build docusaurus
        id: build
        uses: zepben/docusaurus-action@main
        with:
          TAG: false
          NPM_REPO: ${{ secrets.NPM_REPO }}
          NPM_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        continue-on-error: true

      - name: Failed build
        if: steps.build.outcome == 'failure'
        run: |
          echo "There was an error in the docusaurus build above. Docs are not pushed"
          echo " :boom: There was an error in the docusaurus build step. Current docs are not published" >> ${GITHUB_STEP_SUMMARY}
        shell: sh

      - name: Check if we need to skip deployment for hotfix or LTS branch
        run: |
          if [[ ${GITHUB_REF_NAME} =~ "hotfix" || ${GITHUB_REF_NAME} =~ "LTS" ]]; then
            echo "deployDocs=no" >> ${GITHUB_ENV}
            echo "Running on LTS or hotfix branch, skip deploying docs"
          else
            echo "deployDocs=yes" >> ${GITHUB_ENV}
          fi

      - name: Zip documentation
        if: ${{ env.deployDocs == 'yes' }}
        run: |
          cd docs/build
          zip -r ../../docs.zip .
        shell: bash

      - uses: actions/upload-artifact@v4
        if: ${{ steps.build.outcome == 'success' && env.deployDocs == 'yes' }}
        id: upload
        with:
          name: docs.zip
          path: docs.zip

      - if: ${{ steps.upload.outcome == 'success' }}
        id: artifact
        run:
          echo "uploaded=yes" >> "${GITHUB_OUTPUT}"

      - name: Fetch the document component name
        id: docs-component
        shell: sh {0}
        run: |
            echo "repo=${GITHUB_REPOSITORY}" >> "${GITHUB_OUTPUT}"
            # if product key is supplied
            if [ "${{ inputs.product-key }}" != "productkeynotprovided" ]; then
              echo "name=${{ inputs.product-key }}" >> "${GITHUB_OUTPUT}"
            else
              # parse out the product key from the repository name
              echo "name=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d\/)" >> "${GITHUB_OUTPUT}"
            fi

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: ${{ needs.build-docs.outputs.artifact-uploaded == 'yes' }}
    steps:
      - name: Deploy documentation
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ secrets.DOCS_REPO }}
          event-type: ${{ secrets.DOCS_REPO_EVOLVE_WORKFLOW }}
          client-payload: '{"product_key": "${{needs.build-docs.outputs.product-key}}", "download_url": "${{needs.build-docs.outputs.product-repo}}"}'

